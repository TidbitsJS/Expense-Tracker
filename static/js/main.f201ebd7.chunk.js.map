{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/AddTransaction.js","components/Transaction.js","components/TransactionList.js","components/Balance.js","components/IncomeExpenses.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","state","action","type","newTransactions","JSON","parse","stringify","transactions","splice","payload","console","log","window","localStorage","setItem","initialState","getItem","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","id","addTransaction","transaction","AddTransaction","useState","text","setText","amount","setAmount","shows","setShows","useContext","onClick","className","aria-hidden","onSubmit","e","preventDefault","newTransaction","Math","floor","random","htmlFor","onChange","target","placeholder","Transaction","index","sign","abs","TransactionList","show","setshow","map","key","Balance","total","reduce","acc","item","toFixed","IncomeExpenses","amounts","income","filter","expense","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f201ebd7.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = (props) => {\n    return (\n        <h2>\n           Expense Tracker \n        </h2>\n    )\n}\n\nexport default Header","export default (state,action) => {\n    switch(action.type) {\n        case 'DELETE_TRANSACTION':\n            let newTransactions = JSON.parse(JSON.stringify(state.transactions))\n            newTransactions.splice(action.payload, 1)\n            console.log(\"delete\",action.payload,newTransactions, state.transactions);\n            window.localStorage.setItem('transactions', JSON.stringify(newTransactions))\n            return {\n                ...state,\n                transactions: newTransactions\n            }\n\n        case 'ADD_TRANSACTION':\n            let transactions = [action.payload, ...state.transactions]\n            window.localStorage.setItem('transactions', JSON.stringify(transactions))\n            return {\n                ...state,\n                transactions: transactions\n            }\n        default:\n            return state\n    }\n}","import React, { createContext, useReducer } from 'react'\nimport AppReducer from 'context/AppReducer'\n\nconst initialState = {\n     transactions: []\n}\n\nlet transactions = window.localStorage.getItem('transactions')\nif (transactions) initialState.transactions = JSON.parse(transactions)\n\nconsole.log(initialState)\n\nexport const GlobalContext = createContext(initialState)\n\nexport const GlobalProvider = ({ children }) => {\n     const [state, dispatch] = useReducer(AppReducer, initialState)\n     \n     function deleteTransaction(id) {\n         dispatch({\n             type: 'DELETE_TRANSACTION',\n             payload: id\n         })\n     }\n\n     function addTransaction(transaction) {\n         dispatch({\n             type: 'ADD_TRANSACTION',\n             payload: transaction\n         })\n     }\n\n     return(\n         <GlobalContext.Provider value={{\n             transactions: state.transactions,\n             deleteTransaction,\n             addTransaction\n         }}>\n             {children}\n         </GlobalContext.Provider>\n     )\n}","import React, { useState, useContext } from 'react'\nimport { GlobalContext } from 'context/GlobalState'\n\nconst AddTransaction = () => {\n    const [text, setText] = useState('')\n    const [amount, setAmount] = useState(0)\n    const [shows, setShows] = useState(false)\n\n    const { addTransaction } = useContext(GlobalContext)\n\n    const onSubmit = e => {\n        e.preventDefault()\n\n        const newTransaction = {\n            id: Math.floor(Math.random() * 100000000 ),\n            text,\n            amount: +amount\n        }\n\n        addTransaction(newTransaction)\n    }\n\n    const showTransaction = () => {\n        setShows(!shows)\n    }\n\n    return (\n        <div>\n            <h3 onClick={showTransaction}\n                className=\"shows\">\n                New Transaction\n                <i className=\"fa fa-plus-circle\" aria-hidden=\"true\"></i>\n            </h3>\n\n            {shows ? (\n              <form onSubmit={onSubmit}>\n                 <div className=\"form-control\">\n                   <label htmlFor=\"text\">Text</label>\n                      <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} placeholder=\"Enter Text\" />\n                 </div>\n                 <div className=\"form-control\">\n                   <label htmlFor=\"amount\">\n                      Amount \n                   </label>\n                   <input type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} placeholder=\"Enter amount\"></input>\n                 </div>\n                 <button className=\"btn\">Add Transaction</button>\n               </form>\n            ) : null}\n\n        </div>\n    )\n}\n\nexport default AddTransaction\n","import React, { useContext } from 'react'\nimport { GlobalContext } from 'context/GlobalState'\n\nconst Transaction = ({ transaction,index }) => {\n    const { deleteTransaction } = useContext(GlobalContext)\n    const sign = transaction.amount < 0 ? '-' : '+'\n\n    return(\n        <li className={transaction.amount < 0 ? 'minus' : 'plus'}>\n            {transaction.text}\n                <span>{sign}${Math.abs(transaction.amount)}</span>\n                <button onClick={() => deleteTransaction(index)} className=\"delete-btn\">X</button>\n        </li>\n    )\n}\n\nexport default Transaction","import React, { useContext, useState } from 'react'\nimport { GlobalContext } from 'context/GlobalState'\nimport Transaction from 'components/Transaction'\n\n\nconst TransactionList = () => {\n    const { transactions } = useContext(GlobalContext) \n    const [show, setshow] = useState(false)\n\n    const showInfo = () => {\n      setshow(!show)\n      console.log(show);\n    }\n\n    return(\n        <>\n          <h3 \n            onClick={showInfo}\n            className=\"shows\">\n              History\n              <i className=\"fa fa-history\" aria-hidden=\"true\"></i>\n          </h3>\n          { show ? (\n            <ul id=\"list\" className=\"list\">\n               {transactions.map((transaction,index) => (\n                 <Transaction key={transaction.id} transaction={transaction} index={index}/>\n               ))}\n           </ul>\n        ) : null}\n        </>\n    )\n}\n\nexport default TransactionList","import React, { useContext } from 'react'\nimport { GlobalContext } from 'context/GlobalState'\n\nconst Balance = () => {\n    const { transactions } = useContext(GlobalContext)\n    const amounts = transactions.map(transaction => transaction.amount)\n    const total = amounts.reduce((acc,item) => (acc += item), 0).toFixed(2)\n\n    return (\n        <div className=\"balance\">\n           <h4>Balance</h4>\n           <h1>${total}</h1> \n        </div>\n    )\n}\n\nexport default Balance\n","import React, { useContext } from 'react';\nimport { GlobalContext } from '../context/GlobalState';\n\nconst IncomeExpenses = () => {\n  const { transactions } = useContext(GlobalContext);\n\n  const amounts = transactions.map(transaction => transaction.amount);\n\n  const income = amounts\n    .filter(item => item > 0)\n    .reduce((acc, item) => (acc += item), 0)\n    .toFixed(2);\n\n  const expense = (\n    amounts.filter(item => item < 0)\n           .reduce((acc, item) => (acc += item), 0) * -1\n  ).toFixed(2);\n\n  return (\n    <div className=\"inc-exp-container\">\n        <div>\n          <h4>Income</h4>\n  <p className=\"money plus\">${income}</p>\n        </div>\n        <div>\n          <h4>Expense</h4>\n  <p className=\"money minus\">${expense}</p>\n        </div>\n      </div>\n  )\n}\n\nexport default IncomeExpenses","import React from 'react'\nimport Header from 'components/Header'\nimport AddTransaction from 'components/AddTransaction'\nimport TransactionList from 'components/TransactionList'\nimport Balance from 'components/Balance'\nimport IncomeExpenses from 'components/IncomeExpenses'\nimport { GlobalProvider } from 'context/GlobalState'\nimport './App.css'\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className=\"container\">\n        <Balance />\n        <IncomeExpenses />\n        <TransactionList />\n        <AddTransaction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}